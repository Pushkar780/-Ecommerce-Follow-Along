{"ast":null,"code":"const ValidationFormObject = {\n  validteName: name => {\n    const nameRegex = /^[a-zA-Z][a-zA-Z\\s'-]{1,49}$/;\n    if (name.length < 2) {\n      return 'Name cannot be less than 2 letters';\n    }\n    if (!nameRegex.test(name)) {\n      return 'Name should not have any symbols';\n    }\n    return true;\n  },\n  validtePass: password => {\n    const passwordRegex = {\n      minLength: 8,\n      maxLength: 128,\n      hasUpperCase: /[A-Z]/,\n      hasLowerCase: /[a-z]/,\n      hasSpecialChar: /[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/\n    };\n    if (password.length < passwordRegex.minLength) {\n      return 'Password Should be more than or equal to 8 characters';\n    }\n    if (password.length > passwordRegex.maxLength) {\n      return 'Password should be less than 128 characters';\n    }\n    if (!passwordRegex.hasLowerCase.test(password)) {\n      return 'Password should have some lowercase characters (a-z)';\n    }\n    if (!passwordRegex.hasUpperCase.test(password)) {\n      return 'Password should have some uppercase characters (A-Z)';\n    }\n    if (!passwordRegex.hasSpecialChar.test(password)) {\n      return 'Password should have special characters';\n    }\n    return true;\n  },\n  validteEmail: email => {\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (email.length > 254) {\n      return {\n        isValid: false,\n        error: 'Email is too long'\n      };\n    }\n    if (!emailRegex.test(email)) {\n      return 'Write the email in the correct format (e.g., name@example.com)';\n    }\n    return true;\n  }\n};\nexport default ValidationFormObject;","map":{"version":3,"names":["ValidationFormObject","validteName","name","nameRegex","length","test","validtePass","password","passwordRegex","minLength","maxLength","hasUpperCase","hasLowerCase","hasSpecialChar","validteEmail","email","emailRegex","isValid","error"],"sources":["C:/Users/DEll/OneDrive/Documents/projects/Follow along/frontend/src/validation.js"],"sourcesContent":["const ValidationFormObject = {\r\n    validteName: (name) => {\r\n      const nameRegex = /^[a-zA-Z][a-zA-Z\\s'-]{1,49}$/;\r\n      if (name.length < 2) {\r\n        return 'Name cannot be less than 2 letters';\r\n      }\r\n      if (!nameRegex.test(name)) {\r\n        return 'Name should not have any symbols';\r\n      }\r\n      return true;\r\n    },\r\n    validtePass: (password) => {\r\n      const passwordRegex = {\r\n        minLength: 8,\r\n        maxLength: 128,\r\n        hasUpperCase: /[A-Z]/,\r\n        hasLowerCase: /[a-z]/,\r\n        hasSpecialChar: /[!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>/?]/, \r\n      };\r\n      if (password.length < passwordRegex.minLength) {\r\n        return 'Password Should be more than or equal to 8 characters';\r\n      }\r\n  \r\n      if (password.length > passwordRegex.maxLength) {\r\n        return 'Password should be less than 128 characters';\r\n      }\r\n  \r\n      if (!passwordRegex.hasLowerCase.test(password)) {\r\n        return 'Password should have some lowercase characters (a-z)';\r\n      }\r\n      if (!passwordRegex.hasUpperCase.test(password)) {\r\n        return 'Password should have some uppercase characters (A-Z)';\r\n      }\r\n      if (!passwordRegex.hasSpecialChar.test(password)) {\r\n        return 'Password should have special characters';\r\n      }\r\n  \r\n      return true;\r\n    },\r\n    validteEmail: (email) => {\r\n      const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n      if (email.length > 254) {\r\n        return { isValid: false, error: 'Email is too long' };\r\n      }\r\n  \r\n      if (!emailRegex.test(email)) {\r\n        return 'Write the email in the correct format (e.g., name@example.com)';\r\n      }\r\n      return true;\r\n    },\r\n  };\r\n  \r\n  export default ValidationFormObject;"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG;EACzBC,WAAW,EAAGC,IAAI,IAAK;IACrB,MAAMC,SAAS,GAAG,8BAA8B;IAChD,IAAID,IAAI,CAACE,MAAM,GAAG,CAAC,EAAE;MACnB,OAAO,oCAAoC;IAC7C;IACA,IAAI,CAACD,SAAS,CAACE,IAAI,CAACH,IAAI,CAAC,EAAE;MACzB,OAAO,kCAAkC;IAC3C;IACA,OAAO,IAAI;EACb,CAAC;EACDI,WAAW,EAAGC,QAAQ,IAAK;IACzB,MAAMC,aAAa,GAAG;MACpBC,SAAS,EAAE,CAAC;MACZC,SAAS,EAAE,GAAG;MACdC,YAAY,EAAE,OAAO;MACrBC,YAAY,EAAE,OAAO;MACrBC,cAAc,EAAE;IAClB,CAAC;IACD,IAAIN,QAAQ,CAACH,MAAM,GAAGI,aAAa,CAACC,SAAS,EAAE;MAC7C,OAAO,uDAAuD;IAChE;IAEA,IAAIF,QAAQ,CAACH,MAAM,GAAGI,aAAa,CAACE,SAAS,EAAE;MAC7C,OAAO,6CAA6C;IACtD;IAEA,IAAI,CAACF,aAAa,CAACI,YAAY,CAACP,IAAI,CAACE,QAAQ,CAAC,EAAE;MAC9C,OAAO,sDAAsD;IAC/D;IACA,IAAI,CAACC,aAAa,CAACG,YAAY,CAACN,IAAI,CAACE,QAAQ,CAAC,EAAE;MAC9C,OAAO,sDAAsD;IAC/D;IACA,IAAI,CAACC,aAAa,CAACK,cAAc,CAACR,IAAI,CAACE,QAAQ,CAAC,EAAE;MAChD,OAAO,yCAAyC;IAClD;IAEA,OAAO,IAAI;EACb,CAAC;EACDO,YAAY,EAAGC,KAAK,IAAK;IACvB,MAAMC,UAAU,GAAG,gDAAgD;IACnE,IAAID,KAAK,CAACX,MAAM,GAAG,GAAG,EAAE;MACtB,OAAO;QAAEa,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAoB,CAAC;IACvD;IAEA,IAAI,CAACF,UAAU,CAACX,IAAI,CAACU,KAAK,CAAC,EAAE;MAC3B,OAAO,gEAAgE;IACzE;IACA,OAAO,IAAI;EACb;AACF,CAAC;AAED,eAAef,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}